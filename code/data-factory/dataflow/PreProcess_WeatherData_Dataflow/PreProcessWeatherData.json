{
    "name": "PreProcessWeatherData",
    "properties": {
        "type": "MappingDataFlow",
        "typeProperties": {
            "sources": [
                {
                    "dataset": {
                        "referenceName": "WeatherDataSink",
                        "type": "DatasetReference"
                    },
                    "name": "WeatherDataSilver"
                }
            ],
            "sinks": [
                {
                    "dataset": {
                        "referenceName": "WeatherDataParquet",
                        "type": "DatasetReference"
                    },
                    "name": "PreProcessWeatherDataSink"
                }
            ],
            "transformations": [
                {
                    "name": "flattenWeatherData"
                },
                {
                    "name": "RemainingColumnsforWeatherData"
                },
                {
                    "name": "TimestampAndLocation",
                    "description": "Creating/updating the columns 'calctime,"
                },
                {
                    "name": "RenameAndDrop",
                    "description": "Rename column names and drop columns"
                },
                {
                    "name": "UniformDecimalPlaces"
                }
            ],
            "scriptLines": [
                "source(output(",
                "          calctime as double,",
                "          city_id as boolean,",
                "          cnt as short,",
                "          cod as short,",
                "          list as (clouds as (all as short), dt as integer, main as (feels_like as double, humidity as short, pressure as short, temp as double, temp_max as double, temp_min as double), rain as ({1h} as double, {3h} as double), snow as ({1h} as double, {3h} as double), weather as (description as string, icon as string, id as short, main as string)[], wind as (deg as short, gust as double, speed as double))[],",
                "          message as string",
                "     ),",
                "     allowSchemaDrift: true,",
                "     validateSchema: false,",
                "     ignoreNoFilesFound: false,",
                "     documentForm: 'documentPerLine',",
                "     wildcardPaths:['Bronze/WeatherAPIData/2.5/history/city*'],",
                "     partitionBy('hash', 1)) ~> WeatherDataSilver",
                "WeatherDataSilver foldDown(unroll(list, list),",
                "     mapColumn(",
                "          calctime,",
                "          city_id,",
                "          cnt,",
                "          cod,",
                "          cloud_all = list.clouds.all,",
                "          message,",
                "          timestamp = list.dt,",
                "          feels_like = list.main.feels_like,",
                "          humidity = list.main.humidity,",
                "          pressure = list.main.pressure,",
                "          temp = list.main.temp,",
                "          temp_max = list.main.temp_max,",
                "          temp_min = list.main.temp_min,",
                "          rain_1h = list.rain.{1h},",
                "          rain_3h = list.rain.{3h},",
                "          weather_description = list.weather.description,",
                "          weather_icon = list.weather.icon,",
                "          weather_id = list.weather.id,",
                "          weather_main = list.weather.main,",
                "          wind_deg = list.wind.deg,",
                "          wind_gust = list.wind.gust,",
                "          wind_speed = list.wind.speed,",
                "          snow_1h = list.snow.{1h},",
                "          snow_3h = list.snow.{3h}",
                "     ),",
                "     skipDuplicateMapInputs: false,",
                "     skipDuplicateMapOutputs: false) ~> flattenWeatherData",
                "TimestampAndLocation derive(id = concat(location, toString(timestamp)),",
                "          temp_c = round(temp - 273.15),",
                "          temp_min_C = round(temp_min - 273.15),",
                "          temp_max_c = round(temp_max - 273.15),",
                "          feels_like_C = round(feels_like - 273.15),",
                "          lon = -71.0589,",
                "          lat = 42.3601,",
                "          temp_F = round(((temp - 273.15) * 9/5) + 32, 2),",
                "          temp_max_F = round(((temp_max - 273.15) * 9/5) + 32, 2),",
                "          temp_min_F = round(((temp_min - 273.15) * 9/5) + 32, 2),",
                "          feels_like_F = round(((feels_like - 273.15) * 9/5) + 32, 2),",
                "          weather_id_value = toInteger(split(toString(weather_id[1]), ': ')[1]),",
                "          weather_description_value = split(weather_description[1], ': ')[1],",
                "          weather_icon_value = split(weather_icon[1], ': ')[1],",
                "          weather_main_value = split(weather_main[1], ': ')[1]) ~> RemainingColumnsforWeatherData",
                "flattenWeatherData derive(date_time = toTimestamp(toLong(timestamp) * 1000L),",
                "          location = 'Boston') ~> TimestampAndLocation",
                "UniformDecimalPlaces select(mapColumn(",
                "          id,",
                "          location,",
                "          date_time,",
                "          temp_K = temp,",
                "          temp_max_K = temp_max,",
                "          temp_min_K = temp_min,",
                "          feels_like_K = feels_like,",
                "          temp_c,",
                "          temp_max_c,",
                "          temp_min_C,",
                "          feels_like_C,",
                "          temp_F,",
                "          temp_max_F,",
                "          temp_min_F,",
                "          feels_like_F,",
                "          humidity,",
                "          wind_speed,",
                "          weather_id_value,",
                "          weather_description_value,",
                "          weather_icon_value,",
                "          weather_main_value",
                "     ),",
                "     skipDuplicateMapInputs: true,",
                "     skipDuplicateMapOutputs: true) ~> RenameAndDrop",
                "RemainingColumnsforWeatherData derive(feels_like = toString(round(feels_like, 2), '0.00'),",
                "          temp = toString(round(temp, 2), '0.00'),",
                "          temp_max = toString(round(temp_max, 2), '0.00'),",
                "          temp_min = toString(round(temp_min, 2), '0.00'),",
                "          wind_speed = toString(round(wind_speed, 2), '0.00'),",
                "          temp_F = toString(round(temp_F, 2), '0.00'),",
                "          temp_max_F = toString(round(temp_max_F, 2), '0.00'),",
                "          temp_min_F = toString(round(temp_min_F, 2), '0.00'),",
                "          feels_like_F = toString(round(feels_like_F, 2), '0.00')) ~> UniformDecimalPlaces",
                "RenameAndDrop sink(allowSchemaDrift: true,",
                "     validateSchema: false,",
                "     format: 'parquet',",
                "     partitionFileNames:['WeatherSilverData'],",
                "     skipDuplicateMapInputs: true,",
                "     skipDuplicateMapOutputs: true,",
                "     partitionBy('hash', 1)) ~> PreProcessWeatherDataSink"
            ]
        }
    }
}